# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Dashboard - Transaction Table Test >> Transaction - Table Pagination Functionality
- Location: C:\actions-runner\Automation\TraxionPay-V3\TraxionPay-V3\Main\Functional_Test\TPayWeb_V3\3_Dashboard.spec.ts:283:9

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByText('Showing 1 to 25 of 100 entries')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByText('Showing 1 to 25 of 100 entries')

    at C:\actions-runner\Automation\TraxionPay-V3\TraxionPay-V3\Main\Functional_Test\TPayWeb_V3\3_Dashboard.spec.ts:307:32
```

# Test source

```ts
  207 |     expect(transactionTable).not.toBeNull();
  208 |   });
  209 |
  210 |     test('Transaction - Status', async () => {
  211 |       // Check the "Failed Pending Success" dropdown
  212 |       const statusDropdown = await page.getByLabel('Success Pending Failed');
  213 |       const statusOptions = ['1', '0', '-1'];
  214 |       for (const option of statusOptions) {
  215 |         await statusDropdown.click(); // Open the dropdown
  216 |         await statusDropdown.selectOption(option);
  217 |         const selectedStatusValue = await statusDropdown.inputValue();
  218 |         expect(selectedStatusValue).toBe(option);
  219 |         // Add a check to verify the table updates accordingly
  220 |         const tableRows = await page.$$('div#transactions-list_wrapper tbody tr');
  221 |         expect(tableRows.length).toBeGreaterThan(0); // Ensure there are rows in the table
  222 |         // Add a delay of 10-20 seconds
  223 |         await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 2000)));
  224 |
  225 |         // Add a delay of 0.3 seconds before scrolling
  226 |         await new Promise(resolve => setTimeout(resolve, 300));
  227 |
  228 |         // Scroll down to the bottom of the table
  229 |         await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
  230 |         // Add a delay to simulate reading time
  231 |         await new Promise(resolve => setTimeout(resolve, 1000));
  232 |
  233 |         // Scroll back up to the transaction table part
  234 |         const transactionTable = await page.$('div.table-responsive > div#transactions-list_wrapper.dt-container.dt-bootstrap5.dt-empty-footer');
  235 |         await transactionTable.scrollIntoViewIfNeeded();
  236 |         // Add a delay to simulate reading time
  237 |         await new Promise(resolve => setTimeout(resolve, 1000));
  238 |       }
  239 |     });
  240 |
  241 |     test('Transaction - Table Entry Page', async () => {
  242 |       const entriesDropdown = await page.getByLabel('entries per page');
  243 |       const entriesOptions = ['10', '25', '50', '100'];
  244 |       for (const option of entriesOptions) {
  245 |         await entriesDropdown.click(); // Open the dropdown
  246 |         await entriesDropdown.selectOption(option);
  247 |         const selectedEntriesValue = await entriesDropdown.inputValue();
  248 |         expect(selectedEntriesValue).toBe(option);
  249 |     
  250 |         // Add a check to verify the table updates accordingly
  251 |         const tableRows = await page.$$('div#transactions-list_wrapper tbody tr');
  252 |         expect(tableRows.length).toBeLessThanOrEqual(parseInt(option)); // Ensure the number of rows does not exceed the selected entries per page
  253 |     
  254 |         // Add a delay of 10-20 seconds
  255 |         await new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * 2000)));
  256 |     
  257 |         // Add a delay of 1 second before scrolling
  258 |         await new Promise(resolve => setTimeout(resolve, 1000));
  259 |     
  260 |         // Scroll down to the bottom of the table
  261 |         await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
  262 |         // Add a delay to simulate reading time
  263 |         await new Promise(resolve => setTimeout(resolve, 1000));
  264 |     
  265 |         // Validate the "Showing 1 to X" text
  266 |         const showingText = `Showing 1 to ${option}`;
  267 |         const showingElement = await page.getByText(showingText);
  268 |         expect(showingElement).toBeVisible();
  269 |     
  270 |         // Validate the number of rows under the transaction table
  271 |         const transactionRows = await page.$$('div#transactions-list_wrapper tbody tr');
  272 |         console.log(`Number of rows for option ${option}: ${transactionRows.length}`);
  273 |         expect(transactionRows.length).toBe(parseInt(option)); // Ensure the number of rows matches the selected entries per page
  274 |     
  275 |         // Scroll back up to the transaction table part
  276 |         const transactionTable = await page.$('div.table-responsive > div#transactions-list_wrapper.dt-container.dt-bootstrap5.dt-empty-footer');
  277 |         await transactionTable.scrollIntoViewIfNeeded();
  278 |         // Add a delay to simulate reading time
  279 |         await new Promise(resolve => setTimeout(resolve, 1000));
  280 |       }
  281 |     });
  282 |     
  283 |     test('Transaction - Table Pagination Functionality', async () => {
  284 |       const entriesDropdown = await page.getByLabel('entries per page');
  285 |       const entriesOptions = ['10', '25', '50', '100'];
  286 |     
  287 |       // Part 1: Interact with the entries per page dropdown
  288 |       for (const option of entriesOptions) {
  289 |         await entriesDropdown.click();
  290 |         await entriesDropdown.selectOption(option);
  291 |         await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for the table to update
  292 |     
  293 |         // Get the total number of entries
  294 |         const totalEntriesText = await page.textContent('div#transactions-list_info');
  295 |         const totalEntriesMatch = totalEntriesText.match(/of (\d+) entries/);
  296 |         const totalEntries = parseInt(totalEntriesMatch[1]);
  297 |     
  298 |         // Function to generate the "Showing X to Y of Z entries" text
  299 |         const generateShowingText = (start, end, total) => `Showing ${start} to ${end} of ${total} entries`;
  300 |     
  301 |         // Calculate the number of entries per page
  302 |         const entriesPerPage = parseInt(option);
  303 |     
  304 |         // Validate initial page
  305 |         let showingText = generateShowingText(1, entriesPerPage, totalEntries);
  306 |         let showingElement = await page.getByText(showingText);
> 307 |         expect(showingElement).toBeVisible();
      |                                ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  308 |     
  309 |         // Validate the number of rows under the transaction table
  310 |         const transactionRows = await page.$$('div#transactions-list_wrapper tbody tr');
  311 |         expect(transactionRows.length).toBeLessThanOrEqual(entriesPerPage); // Ensure the number of rows does not exceed the selected entries per page
  312 |       }
  313 |     
  314 |       // Part 2: Set entries per page to 10 and navigate through pages
  315 |       await entriesDropdown.click();
  316 |       await entriesDropdown.selectOption('10');
  317 |       await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for the table to update
  318 |     
  319 |       // Get the total number of entries
  320 |       const totalEntriesText = await page.textContent('div#transactions-list_info');
  321 |       const totalEntriesMatch = totalEntriesText.match(/of (\d+) entries/);
  322 |       const totalEntries = parseInt(totalEntriesMatch[1]);
  323 |     
  324 |       // Function to generate the "Showing X to Y of Z entries" text
  325 |       const generateShowingText = (start, end, total) => `Showing ${start} to ${end} of ${total} entries`;
  326 |     
  327 |       // Calculate the number of entries per page
  328 |       const entriesPerPage = 10;
  329 |     
  330 |       // Validate initial page
  331 |       let showingText = generateShowingText(1, entriesPerPage, totalEntries);
  332 |       let showingElement = await page.getByText(showingText);
  333 |       expect(showingElement).toBeVisible();
  334 |     
  335 |       // Skip pagination tests if total entries are less than or equal to entries per page
  336 |       if (totalEntries > entriesPerPage) {
  337 |         // Click Next and validate
  338 |         await page.getByLabel('Next').click();
  339 |         await new Promise(resolve => setTimeout(resolve, 500)); // Wait for the table to update
  340 |         showingText = generateShowingText(entriesPerPage + 1, Math.min(entriesPerPage * 2, totalEntries), totalEntries);
  341 |         showingElement = await page.getByText(showingText);
  342 |         expect(showingElement).toBeVisible();
  343 |     
  344 |         // Click Next and validate
  345 |         await page.getByLabel('Next').click();
  346 |         await new Promise(resolve => setTimeout(resolve, 500)); // Wait for the table to update
  347 |         showingText = generateShowingText(entriesPerPage * 2 + 1, Math.min(entriesPerPage * 3, totalEntries), totalEntries);
  348 |         showingElement = await page.getByText(showingText);
  349 |         expect(showingElement).toBeVisible();
  350 |     
  351 |         // Click Previous and validate
  352 |         await page.getByLabel('Previous').click();
  353 |         await new Promise(resolve => setTimeout(resolve, 500)); // Wait for the table to update
  354 |         showingText = generateShowingText(entriesPerPage + 1, Math.min(entriesPerPage * 2, totalEntries), totalEntries);
  355 |         showingElement = await page.getByText(showingText);
  356 |         expect(showingElement).toBeVisible();
  357 |     
  358 |         // Click First and validate
  359 |         await page.getByLabel('First').click();
  360 |         await new Promise(resolve => setTimeout(resolve, 500)); // Wait for the table to update
  361 |         showingText = generateShowingText(1, entriesPerPage, totalEntries);
  362 |         showingElement = await page.getByText(showingText);
  363 |         expect(showingElement).toBeVisible();
  364 |     
  365 |         // Click Last and validate
  366 |         await page.getByLabel('Last').click();
  367 |         await new Promise(resolve => setTimeout(resolve, 500)); // Wait for the table to update
  368 |         const lastPageStart = Math.floor((totalEntries - 1) / entriesPerPage) * entriesPerPage + 1;
  369 |         showingText = generateShowingText(lastPageStart, totalEntries, totalEntries);
  370 |         showingElement = await page.getByText(showingText);
  371 |       }
  372 |     });
  373 | });
```